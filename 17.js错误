JavaScript 错误 - Throw、Try 和 Catch

try 语句测试代码块的错误
catch 语句处理错误。
throw 语句创建自定义错误。




1.JavaScript 抛出错误

当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。

描述这种情况的技术术语是：JavaScript 将抛出一个错误。



2.JavaScript 测试和捕捉
try 语句允许我们定义在执行时进行错误测试的代码块。
catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。
JavaScript 语句 try 和 catch 是成对出现的。


语法

try
  {
  //在这里运行代码
  }
catch(err)
  {
  //在这里处理错误
  }



实例：

在下面的例子中，我们故意在 try 块的代码中写了一个错字。

catch 块会捕捉到 try 块中的错误，并执行代码来处理它。

<html>
<head>
<script>

var txt="";
function message() {
try
  {
        allert("Welcome guest!!!");
  }
catch(err)
  {
        txt="There was an error on this page..\n\n";
        txt+="Error description: " + err.message + "\n\n";
        txt+="Click ok to continue...\n\n";
        alert(txt);
  }
}


</script>
</head>
<body>

<input type="button" value="view message" onclick="message()">


</body>
</html>


try代码执行有问题时会自动执行catch代码，try代码执行正常，catch代码不会被执行

实例2：

var r1, r2, s = null;
try {
    r1 = s.length; // 此处应产生错误
    r2 = 100; // 该语句不会执行
} catch (e) {
    alert('出错了：' + e);
} finally {
    console.log('finally');
}
console.log('r1 = ' + r1); // r1应为undefined
console.log('r2 = ' + r2); // r2应为undefined

当代码块被try { ... }包裹的时候，就表示这部分代码执行过程中可能会发生错误，一旦发生错误，就不再继续执行后续代码，转而跳到catch块。catch (e) { ... }包裹的代码就是错误处理代码，变量e表示捕获到的错误。最后，无论有没有错误，finally一定会被执行。

所以，有错误发生时，执行流程像这样：

    先执行try { ... }的代码；
    执行到出错的语句时，后续语句不再继续执行，转而执行catch (e) { ... }代码；
    最后执行finally { ... }代码。

而没有错误发生时，执行流程像这样：

    先执行try { ... }的代码；
    因为没有出错，catch (e) { ... }代码不会被执行；
    最后执行finally { ... }代码。



3.Throw 语句
throw 语句允许我们创建自定义错误。
正确的技术术语是：创建或抛出异常（exception）。
如果把 throw 与 try 和 catch 一起使用，那么您能够控制程序流，并生成自定义的错误消息。

语法：

throw exception


异常可以是 JavaScript 字符串、数字、逻辑值或对象。

实例：

检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息

<!DOCTYPE html>
<html>
<body>

<script>
function myFunction() {
  try
  {
        var x=document.getElementById("demo").value;
        if(x=="") throw "NULL INPUT";
        if(isNaN(x)) throw "NOT NUM";
        if(x>10) throw "BIGER";
        if(x<5) throw "SMALL";
  }
  catch(err)
  {
        var y=document.getElementById("mess");
        y.innerHTML="error: " +err+".";
  }
}

</script>
<h1>This is my FRSIT javascript program.... </h1>
<p>PLS INPUT NUM BETWEEN 5-10... </p>
<input id="demo" type="text">
<button type="button" onclick="myFunction()">INPUT_NUM_TEST</button>
<p id="mess"> </p>

</body>


</html>



4.错误类型

JavaScript有一个标准的Error对象表示错误，还有从Error派生的TypeError、ReferenceError等错误对象。我们在处理错误时，可以通过catch(e)捕获的变量e访问错误对象：

try {
    ...
} catch (e) {
    if (e instanceof TypeError) {
        alert('Type error!');
    } else if (e instanceof Error) {
        alert(e.message);
    } else {
        alert('Error: ' + e);
    }
}


5.错误传播

如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数

如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。

所以，我们不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获，一网打尽：


function main(s) {
    console.log('BEGIN main()');
    try {
        foo(s);
    } catch (e) {
        alert('出错了：' + e);
    }
    console.log('END main()');
}

function foo(s) {
    console.log('BEGIN foo()');
    bar(s);
    console.log('END foo()');
}

function bar(s) {
    console.log('BEGIN bar()');
    console.log('length = ' + s.length);
    console.log('END bar()');
}

main(null);


当bar()函数传入参数null时，代码会报错，错误会向上抛给调用方foo()函数

foo()函数没有try ... catch语句，所以错误继续向上抛给调用方main()函数，main()函数有try ... catch语句，所以错误最终在main()函数被处理了。

至于在哪些地方捕获错误比较合适，需要视情况而定。












UPDATE BY SHENGKAI 2017-6-7 1：32 AM










