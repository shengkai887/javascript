1.JavaScript Window Screen

window.screen 对象包含有关用户屏幕的信息。

window.screen 对象在编写时可以不使用 window 这个前缀。

screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。
screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。


2.JavaScript Window Location

window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。

window.location 对象在编写时可不使用 window 这个前缀。


    location.hostname 返回 web 主机的域名
    location.pathname 返回当前页面的路径和文件名
    location.port 返回 web 主机的端口 （80 或 443）
    location.protocol 返回所使用的 web 协议（http:// 或 https://）
    location.href 属性返回当前页面的 URL。
    location.assign() 方法加载新的文档。
    
    
3.JavaScript Window History  略过已经禁止使用该方法

4.JavaScript Window Navigator

window.navigator 对象包含有关访问者浏览器的信息。

window.navigator 对象在编写时可不使用 window 这个前缀。

警告：来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：

    navigator 数据可被浏览器使用者更改
    浏览器无法报告晚于浏览器发布的新操作系统

------------------------------------------------------------------------------------------------------

整合上面4中属性实例：

<html>
<body>

<p id="demo"> </p>
<div id="example"></div>
<script>

var w=window.innerWidth || document.documentElement.clientWidth ||documnet.body.clientWidth;

var h=window.innrHeight || document.documentElement.clientHeight || document.body.clientHeight;

x=document.getElementById("demo");
x.innerHTML="browser: "+w+"x"+h;

document.write("available Width : " +screen.availWidth+"<br />");
document.write("available Height: " +screen.availHeight+"<br />");

document.write(location.href+"<br />");
document.write(location.pathname+"<br />");

function newurl() {
  window.location.assign("https://coding.net");
}


txt = "<p>Browser CodeName: " + navigator.appCodeName + "</p>";
txt+= "<p>Browser Name: " + navigator.appName + "</p>";
txt+= "<p>Browser Version: " + navigator.appVersion + "</p>";
txt+= "<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>";
txt+= "<p>Platform: " + navigator.platform + "</p>";
txt+= "<p>User-agent header: " + navigator.userAgent + "</p>";
txt+= "<p>User-agent language: " + navigator.systemLanguage + "</p>";

document.getElementById("example").innerHTML=txt;


</script>

<input type="button" value="reload new page" onclick="newurl()">


</body>
</html>

UPDATE BY SHENGKAI 2017-6-8

-----------------------------------------------------------------------------------------------------------


5.JavaScript 消息框PopupAlert

可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。

警告框
警告框经常用于确保用户可以得到某些信息。

当警告框出现后，用户需要点击确定按钮才能继续进行操作。

alert("文本")


确认框
确认框用于使用户可以验证或者接受某些信息。

当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。

如果用户点击确认，那么返回值为 true。如果用户点击取消，那么返回值为 false。
语法：

confirm("文本")


提示框
提示框经常用于提示用户在进入页面前输入某个值。

当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。

如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。
语法：

prompt("文本","默认值")


实例1：警告框
<html>
<head>
<script type="text/javascript">
function disp_alert()
{
alert("我是警告框！！")
}
</script>
</head>
<body>

<input type="button" onclick="disp_alert()" value="显示警告框" />

</body>
</html>

实例2：带有折行的警告框

<html>
<head>
<script type="text/javascript">
function disp_alert()
{
alert("再次向您问好！在这里，我们向您演示" + '\n' + "如何向警告框添加折行。")
}
</script>
</head>
<body>

<input type="button" onclick="disp_alert()" value="显示警告框" />

</body>
</html>

实例3：确认框
<html>
<body>


<script>
function show_confirm()
{
  var r=confirm("Press a button?");
  if (r==true) {
    alert("You PRESSED OK");
  } else {
    alert("You pressed cancel");
  }
}


</script>
<input type="button" onclick="show_confirm()" value="confirm show">

</body>
</html>

实例4：提示框

<html>
<body>


<script>

function disp_prompt() {
  var name=prompt("PLS_INPUT_NAME","BILL GATES");
  if (name != null && name !="") {
    document.write("hello, "+ name + "how are you..")
  }
}


</script>
<input type="button" onclick="disp_prompt()" value="display_prompt">

</body>
</html>



UPDATE BY HUBERT 2017-6-8 6：59 AM 





















































































































