JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。

但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。

为了解决这个问题，最新的ES6规范引入了新的数据类型Map


1.MAP

Map是一组键值对的结构，具有极快的查找速度。

实例：

<!DOCTYPE html>
<html>
<body>
<script>
'use strict';
function myFunction()
{
var m = new Map([['michael',95],['bob',88],['tracy',88]]);
document.getElementById("demo").innerHTML=m.get('bob');
}


</script>
<p>PLS CHECK BUTTON TO GET GRADE FOR BOB</p>
BOB_GRADE: <p id="demo"></p>
<button type="button" onclick="myFunction()">GET_GRADE</button>


</body>
</html>

初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：

var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined

由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉



2.Set

Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。

要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set：

var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3

重复元素在Set中自动被过滤：

var s = new Set([1, 2, 3, 3, '3']);
s; // Set {1, 2, 3, "3"}

注意数字3和字符串'3'是不同的元素。

通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：

通过delete(key)方法可以删除元素：



UPDATE BY SHENGKAI 2017-6-22 21:00 PM 















