
1.如何遍历一个数组的元素？

(1)方法1：当 JavaScript 出现时，你也许会这样做：

for (var index = 0; index < myArray.length; index++) {
  console.log(myArray[index]);
}

(2)方法2：自从 ES5 开始，你可以使用内置的 forEach 方法：

myArray.forEach(function (value) {
  console.log(value);
});

var s = new Set(['A', 'B', 'C']);
s.forEach(function (element, sameElement, set) {
    alert(element);
});

var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
m.forEach(function (value, key, map) {
    alert(value);
});


代码更为精简，但有一个小缺点：不能使用 break 语句来跳出循环，也不能使用 return 语句来从闭包函数中返回。

(3)方法3：使用 for-in

for (var index in myArray) { // 实际代码中不要这么做
  console.log(myArray[index]);
}

(3.1)上面代码中的 index 变量将会是 "0"、"1"、"3" 等这样的字符串，而并不是数值类型。
如果你使用字符串的 index 去参与某些运算（"2" + 1 == "21"），运算结果可能会不符合预期。

(3.2)不仅数组本身的元素将被遍历到，那些由用户添加的附加（expando）元素也将被遍历到，
例如某数组有这样一个属性 myArray.name，那么在某次循环中将会出现 index="name" 的情况。而且，甚至连数组原型链上的属性也可能被遍历到。
   
(3.3)最不可思议的是，在某些情况下，上面代码将会以任意顺序去遍历数组元素。

实例：


<script>

  var a = ['A','B','C','D'];
  a.name = 'hello';
  for(var x in a)
  {
    console.log(x); //0,1,2,3,name  属性
  }

  for(var y of a)
  {
    console.log(y);//'A','B','C','D'
  }


</script>

for-in 设计的目的是用于遍历包含键值对的对象，对数组并不是那么友好。

(4)强大的 for-of 循环

ES6 解决该问题的唯一办法是引入新的循环遍历语法。

for (var value of myArray) {
  console.log(value);
}


    这是遍历数组最简单直接的方法
    避免了所有 for–in 语法存在的坑
    与 forEach() 不同的是，它支持 break、continue 和 return 语句。

for–in 用于遍历对象的属性。

for-of 用于遍历数据 – 就像数组中的元素。

然而，这还不是 for-of 的所有特性，下面还有更精彩的部分。





2.支持for of的其他集合

for-of 不仅仅是为数组设计，还可以用于类数组的对象，比如 DOM 对象的集合 NodeList。

也可以用于遍历字符串，它将字符串看成是 Unicode 字符的集合：
for (var chr of "bbsrc") {
  alert(chr);
}

它还适用于 Map 和 Set 对象。

遍历set
// make a set from an array of words
var uniqueWords = new Set(words);
for (var word of uniqueWords) {
  console.log(word);
}

遍历map
Map 对象由键值对构成，遍历方式略有不同，你需要用两个独立的变量来分别接收键和值：

for (var [key, value] of phoneBookMap) {
  console.log(key + "'s phone number is: " + value);
}

到目前为止，你已经知道：JS 已经支持一些集合对象，而且后面将会支持更多。for-of 语法正是为这些集合对象而设计。

for-of 不能直接用来遍历对象的属性，如果你想遍历对象的属性，你可以使用 for-in 语句（for-in 就是用来干这个的），或者使用下面的方式：

// dump an object's own enumerable properties to the console
for (var key of Object.keys(someObject)) {
  console.log(key + ": " + someObject[key]);


实例：
  var mapname = new Map([[1, 'xx'], [2, 'yy'], [3, 'zz']]);

  for (var [key,value] of mapname)
  {
    console.log(key+" : "+value);
  }



3.内部原理

for-of 要求被遍历的对象实现特定的方法。所有的 Array、Map 和 Set 对象都有一个共性，那就是他们都实现了一个迭代器（iterator）方法。

一个拥有 [Symbol.iterator]() 方法的对象被认为是可遍历的（iterable）。



4.迭代器对象

就拿 for-of 语句来说，它首先调用被遍历集合对象的 [Symbol.iterator]() 方法，该方法返回一个迭代器对象，

迭代器对象可以是拥有 .next 方法的任何对象；然后，在 for-of 的每次循环中，都将调用该迭代器对象上的 .next 方法。下面是一个最简单的迭代器对象：

var zeroesForeverIterator = {
  [Symbol.iterator]: function () {
    return this;
  },
  next: function () {
    return {done: false, value: 0};
  }
};

在上面代码中，每次调用 .next() 方法时都返回了同一个结果，该结果一方面告知 for-of 语句循环遍历还没有结束，另一方面告知 for-of 语句本次循环的值为 0。

这意味着 for (value of zeroesForeverIterator) {} 是一个死循环。当然，一个典型的迭代器不会如此简单。

ES6 的迭代器通过 .done 和 .value 这两个属性来标识每次的遍历结果，这就是迭代器的设计原理

在 Python 中，迭代器对象只有一个 .next() 方法，当没有可遍历的元素时将抛出一个 StopIteration 异常。

现在我们知道了 for-of 的所有细节，那么我们可以简单地重写该语句。

首先是 for-of 循环体：

for (VAR of ITERABLE) {
  STATEMENTS
}

这只是一个语义化的实现，使用了一些底层方法和几个临时变量：

var $iterator = ITERABLE[Symbol.iterator]();
var $result = $iterator.next();
while (!$result.done) {
  VAR = $result.value;
  STATEMENTS
  $result = $iterator.next();
}

5.兼容性

所有 Firefox 的 Release 版本都已经支持 for-of 语句。
Chrome 默认禁用了该语句，你可以在地址栏输入 chrome://flags 进入设置页面，然后勾选其中的 “Experimental JavaScript” 选项。
微软的 Spartan 浏览器也支持该语句，但是 IE 不支持。

如果你想在 Web 开发中使用该语句，而且需要兼容 IE 和 Safari 浏览器，你可以使用 Babel 或 Google 的 Traceur 这类编译器，来将 ES6 代码转换为 Web 友好的 ES5 代码。





对于服务器端，我们不需要任何编译器 – 可以在 io.js 中直接使用该语句，或者在 NodeJS 启动时使用 --harmony 启动选项。




UPDATE BY SHENGKAI 2017-6-23 22:03 PM 
